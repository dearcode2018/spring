

AOP

AOP基础
1）AOP: Aspect-Oriented Programming
面向切面编程
OOP是从静态角度考虑程序的结构，而AOP是从动态角度考虑程序的运行。
AOP的作用: 
常常通过AOP来处理一些具有横切性质的系统性服务，例如: 事务管理、对象池管理、安全检查，缓存、日志。
2）
3）连接点
执行点 → 切点 （y轴坐标-某个方法）
方位 → 增强 （x轴坐标-方法的某个位置）
连接点由执行点和方位组成，执行点只是告诉引擎是哪个方法，而方位告诉在方法中的位置；执行点相当于x轴坐标，方位相当于y轴坐标，x,y2个坐标一起才能确切定位位置.
圆环-解释: 执行点相当于半径长度，方位相当于角度，2个信息都知道了，就明确在哪个圆环的哪个点上.
圆木: 类
圆木_截: 方法 （执行点）
圆木_截_环: 方法某个位置 （方位）
① 切点
连接点 对应数据表的1条记录，切点 对应查询条件
1个条件可以查询出多条记录，因此一个切点对应多个连接点.
class PointCut {List<JoinPoint> points;}
② 增强
包含添加到目标连接点的一段执行逻辑，以及连接点的方位信息.
4）切点
5）增强（Advice）
spring提供的增强接口都是带方位名的: BeforeAdvice//AfterReturning//
6）

1）
2）在beans标签下: 
<aop:config>
	<aop:aspect id="" ref="">
		<aop:pointcut id="" expression="execution()" />
<aop:before method="" pointcut-ref="" />
		<aop:after method="" pointcut-ref="" />
	</aop:aspect>
</aop:config>
3）execution(* packageName..*.*(..))
*{1}: 表示所有的返回值类型
*{2}: 表示包下的所有的类
*{3}: 表示类的所有方法
..{1}: 表示所有子包
..{2}: 表示所有的参数
这些通配符可以结合实际值来搭配。
（返回值类型、包层次、类名、方法名、参数类型）
void: void
!void: 非void
4）aspectj类库
AspectJ是一个专门用来实现动态代理的类库。
AspectJ是面向切面编程的框架，Spring就是使用这个类库实现动态代理的。
5）aop标签1
Aop配置: <aop:config>
切面: <aop:aspect id="" ref="">
切点: <aop:pointcut id="" expression="">
处理Before: <aop:before method="" pointcut-ref="" />
处理After: <aop:after method="" pointcut-ref="" />
6）AOP与OOP
AOP（面向切面的编程）与OOP之间是互相补充的关系，OOP主要用于将核心领域模型映射为类和对象，
包括属性和方法，而AOP用于将传统散布的各个领域对象中的共同关注点，
如日志记录，权限控制等这些与核心业务无关的内容封装起来，
减少系统中的重复代码。将一个系统实现分为核心关注点和横切关注点，
核心关注点通过OOP来实现，而横切关注点抽象为一个个切面，通过AOP来实现。
AOP采用与传统相反的方式，例如要实现一个日志记录，传统的实现方式是在领域模型中每个
需要记录日志的地方都调用日志记录的方法，导致系统在水平层面存在很多的重复代码，
而AOP是通过在一个切面中封装日志记录的功能，然后注册哪些地方需要调用这个功能。
这样就使得领域模型只关注于核心业务，从而使得代码更容易理解。
通过利用AOP技术，改变了整个系统的设计方式。在分析系统需求之初，利用AOP的思想，
分离出核心关注点和横切关注点。在实现了诸如日志、事务管理、权限控制等横切关注点的通用逻辑后，
开发人员就可以专注于核心关注点，将精力投入到解决企业的商业逻辑上来。同时，
这些封装好了的横切关注点提供的功能，可以最大限度地复用于商业逻辑的各个部分，
既不需要开发人员作特殊的编码，也不会因为修改横切关注点的功能而影响具体的业务功能。
7）AOP术语
1、join point（连接点）: 是程序执行中的一个精确执行点，例如类中的一个方法。
它是一个抽象的概念，在实现AOP时，并不需要去定义一个join point。
2、point cut（切入点）: 本质上是一个捕获连接点的结构。在AOP中，
可以定义一个point cut，来捕获相关方法的调用。
3、advice（通知）: 是point cut的执行代码，是执行方面的具体逻辑。
4、aspect（方面）: point cut和advice结合起来就是aspect，
它类似于OOP中定义的一个类，但它代表的更多是对象间横向的关系。
5、introduce（引入）: 为对象引入附加的方法或属性，
从而达到修改对象结构的目的。有的AOP工具又将其称为mixin。

AOP通知类型
1）前置通知（Before advice）: 在某连接点（join point）之前执行的通知，
但这个通知不能阻止连接点前的执行（除非它抛出一个异常）。
2）返回后通知（After returning advice）: 在某连接点（join point）
正常完成后执行的通知: 例如，一个方法没有抛出任何异常，正常返回。
3）抛出异常后通知（After throwing advice）:  在方法抛出异常退出时执行的通知。
4）后通知（After （finally）advice）: 当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。
5）环绕通知（Around advice）: 包围一个连接点（join point）的通知，
如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。
它也会选择是否继续执行连接点或直接返回它们自己的返回值或抛出异常来结束执行。

Aop概念
1）切点
2）
通知（advice）: 系统需要的安全、事务、日志等，先定义好，给需要的地方调用。
连接点（joinpoint）: 允许使用通知的地方，每个方法的前/后/抛出异常等都可以是连接点。
切入点（pointcut）: 让切点来筛选连接点，即筛选方法。
切面（aspect）: 通知和切入点的结合，通知说明了什么时候干什么；
切入点说明了在哪干（指定到底是哪个方法）。
引入（introduction）: 向现有的类添加新方法属性。
目标（target）: 被通知的对象，即业务逻辑组件。
代理（proxy）: 实现AOP机制的代理对象。
织入（weave）: 把切面应用到目标对象来创建新的代理对象的过程。
3）切面逻辑
4）AOP实现原理: 
AOP 实际上是由目标类的代理类实现的。AOP 代理其实是由 AOP 框架动态生成的一个对象，
该对象可作为目标对象使用。AOP 代理包含了目标对象的全部方法，
但 AOP 代理中的方法与目标对象的方法存在差异，AOP 方法在特定切入点添加了增强处理，
并回调了目标对象的方法。
5）Spring对Aop的支持
Spring 中 AOP 代理由 Spring 的 IoC 容器负责生成、管理，其依赖关系也由IoC容器负责管理。
因此，AOP 代理可以直接使用容器中的其他 Bean 实例作为目标，
这种关系可由IoC容器的依赖注入提供。Spring 默认使用 Java 动态代理来创建 AOP 代理，
 这样就可以为任何接口实例创建代理了。当需要代理的类不是代理接口的时候，
 Spring自动会切换为使用CGLIB代理，也可强制使用CGLIB。 
纵观AOP编程，需要参与的三个部分: 
•定义普通业务组件。
•定义切入点，一个切入点可能横切多个业务组件。
•定义增强处理，增强处理就是在 AOP 框架为普通业务组件织入的处理动作。
所以进行 AOP 编程的关键就是定义切入点和定义增强处理。
一旦定义了合适的切入点和增强处理，AOP 框架将会自动生成 AOP 代理，即: 
代理对象的方法 = 增强处理 + 被代理对象的方法。
6）为什么使用AOP
① 减少代码量
② 逻辑更清晰，让业务逻辑组件去关注自己本身的业务，而不用关注安全、事务，日志等。
7）
8）

8）访问目标方法的参数
定义增强处理的方法时，将第一个参数定义为JoinPoint类型，
当该增强处理方法被调用时，该JoinPoint参数就代表了织入增强处理的连接点。
org.aspectj.lang.JointPoint方法: 
Object[] getArgs()返回执行目标方法时的参数
Signature getSignature()返回被增强方法的相关信息
Object getTarget()返回被织入增强处理的目标对象
Obejct getThis()返回AOP框架为目标生成的代理对象
org.aspectj.lang.ProceedingJointPoint是JointPoint的子类。
9）定义切入点
①切入点表达式
②方法名/任意参数的方法（建议格式: private void Xy(){}// 返回void,空参,空实现）
示例: 
@pointcut("execution(* packageName..className.test(..))")
private vod hehe() {}
使用上面定义的切点: 
@Before(pointcut="hehe()")
public String yu(String str) {...}
10）

Aop配置xml方式
1）xml方式相对注解方式有如下优点: 
① 当切面类没有源代码、使用第三方切面类时，只能用xml配置方式，注解方式没法用。
② 注解方式一旦程序编译之后就不可修改，而xml方式在项目编译成型之后，
可以通过修改xml配置文件的方式来修改项目的具体配置。




aop注解
1）
2）
3）AOP注解
1）启用Spring对@AspectJ切面配置的支持
方式1: 在xml中加入（产生自动代理）: 
<aop:aspectj-autoproxy />
方式2: （不实用Spring XML Schema配置方式，即不使用aop标签而使用bean标签）: 
<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />
2）定义切面类
@Aspect
org.aspectj.lang.annotation.Aspect
定义了切面类之后，就可以在该类的方法中定义各种增强处理了。
3）定义Before增强处理
@Before("execution(...)")
在execution()里面写作为切入点的所有匹配方法
该类的方法声明....
org.aspectj.lang.annotation.Before
4）定义AfterReturning增强处理
@AfterReturning(returning="", pointcut="execution(...)")
public Yy Xx(Obejct rvt) {}
org.aspectj.lang.annotation.AfterReturning
5）定义AfterThrowing增强处理
@AfterThrowing(throwing="", pointcut="execution(...)")
public Xx Yy(Throwable t) {}
org.aspectj.lang.annotation.AfterThrowing
AfterReturning增强处理只有在目标方法成功完成后才会被织入。
6）定义After增强处理
@After(execution())
After增强处理不管目标方法如何结束，它都会被织入。
org.aspectj.lang.annotation.After
7）定义Around增强处理
Around增强处理可以修改执行目标方法时的参数值/返回值。
@Around("executon(...)")
public Object Yx(ProceedingJoinPoint jp) {
....
	Object rvt = jp.proceed(new Stirng[]{"被修改的参数"};
....
return rvt;
}
org.aspectj.lang.ProceedingJoinPoint
org.aspectj.lang.annotation.Around
4）
5）








